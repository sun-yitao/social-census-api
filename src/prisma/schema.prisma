// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Response {
  uid        String
  option     QuestionOption @relation(fields: [optionId, questionId], references: [id, questionId], onDelete: Cascade)
  optionId   Int
  questionId Int
  createdAt  DateTime       @default(now())

  @@id([uid, optionId, questionId])
}

model QuestionOption {
  id         Int
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  body       String
  responses  Response[]

  @@id([id, questionId])
}

model Question {
  id              Int              @id @default(autoincrement())
  body            String
  category        String
  type            QuestionType
  knowMore        Json
  createdAt       DateTime         @default(now())
  options         QuestionOption[]
  comments        Comment[]
  matchQuestions  MatchQuestion[]
  matchExclusions MatchExclusion[]
}

enum QuestionType {
  BINARY
  MULTIPLE_CHOICE
  MULTIPLE_RESPONSE
  SCALE
}

model Comment {
  id         Int       @id @default(autoincrement())
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  uid        String
  parentId   Int?
  body       String
  createdAt  DateTime  @default(now())
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  children   Comment[] @relation("CommentReplies")
  likes      Like[]
  reports    Report[]
}

model Like {
  uid       String
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([uid, commentId])
}

model Report {
  uid       String
  commentId Int
  reason    String?
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([uid, commentId])
}

model MatchExclusion {
  uid        String
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([uid, questionId])
}

model Match {
  id        Int       @id @default(autoincrement())
  uid       String
  otherUid  String?
  createdAt DateTime  @default(now())
  matchedAt DateTime?

  matchQuestions MatchQuestion[]
}

model MatchQuestion {
  matchId    Int
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  match      Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@id([matchId, questionId])
}
